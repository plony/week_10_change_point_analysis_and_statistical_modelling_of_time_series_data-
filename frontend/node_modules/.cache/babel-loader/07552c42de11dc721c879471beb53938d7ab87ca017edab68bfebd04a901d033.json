{"ast":null,"code":"var _jsxFileName = \"D:\\\\10academy\\\\week_10_change_point_analysis_and_statistical_modelling_of_time_series_data\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Function to fetch data from the Flask API\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/api/analysis_results');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (e) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading dashboard...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  const historicalData = data.historical_prices.map(item => ({\n    ...item,\n    Date: new Date(item.Date).getFullYear() // Recharts works better with numeric/date objects\n  }));\n  const changePointDate = new Date(data.change_point.date);\n  const changePointYear = changePointDate.getFullYear();\n  const events = data.geopolitical_events.map(event => ({\n    ...event,\n    event_date: new Date(event.event_date)\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Brent Oil Price Change Point Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The most probable change point was identified around\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight-date\",\n          children: data.change_point.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mean-values\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Mean Price Before: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mean-before\",\n            children: [\"$\", data.change_point.mu_before_mean.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Mean Price After: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mean-after\",\n            children: [\"$\", data.change_point.mu_after_mean.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 500,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: historicalData,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"Date\",\n            type: \"number\",\n            scale: \"time\",\n            domain: ['dataMin', 'dataMax'],\n            tickFormatter: tick => new Date(tick, 0, 1).getFullYear()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            label: {\n              value: 'Price (USD per barrel)',\n              angle: -90,\n              position: 'insideLeft'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            labelFormatter: label => `Date: ${new Date(label, 0, 1).getFullYear()}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"Price\",\n            stroke: \"#8884d8\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n            x: changePointYear,\n            stroke: \"red\",\n            strokeDasharray: \"3 3\",\n            label: {\n              position: \"top\",\n              value: `Change Point`,\n              fill: \"red\",\n              fontSize: 12\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), events.map((event, index) => /*#__PURE__*/_jsxDEV(ReferenceLine, {\n            x: event.event_date.getFullYear(),\n            stroke: \"green\",\n            strokeDasharray: \"3 3\",\n            label: {\n              position: \"bottom\",\n              value: event.event_name,\n              fill: \"green\",\n              fontSize: 10,\n              dy: index % 2 === 0 ? 20 : 0\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ReferenceLine","jsxDEV","_jsxDEV","App","_s","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","ok","Error","status","result","json","e","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","historicalData","historical_prices","map","item","Date","getFullYear","changePointDate","change_point","date","changePointYear","events","geopolitical_events","event","event_date","mu_before_mean","toFixed","mu_after_mean","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","scale","domain","tickFormatter","tick","label","value","angle","position","labelFormatter","stroke","dot","x","fill","fontSize","index","event_name","dy","_c","$RefreshReg$"],"sources":["D:/10academy/week_10_change_point_analysis_and_statistical_modelling_of_time_series_data/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Function to fetch data from the Flask API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:5000/api/analysis_results');\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const result = await response.json();\r\n        setData(result);\r\n      } catch (e) {\r\n        setError(e.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading dashboard...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">Error: {error}</div>;\r\n  }\r\n\r\n  const historicalData = data.historical_prices.map(item => ({\r\n    ...item,\r\n    Date: new Date(item.Date).getFullYear() // Recharts works better with numeric/date objects\r\n  }));\r\n\r\n  const changePointDate = new Date(data.change_point.date);\r\n  const changePointYear = changePointDate.getFullYear();\r\n\r\n  const events = data.geopolitical_events.map(event => ({\r\n    ...event,\r\n    event_date: new Date(event.event_date)\r\n  }));\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Brent Oil Price Change Point Analysis</h1>\r\n        <p>\r\n          The most probable change point was identified around{' '}\r\n          <span className=\"highlight-date\">{data.change_point.date}</span>.\r\n        </p>\r\n        <div className=\"mean-values\">\r\n          <p>\r\n            Mean Price Before: <span className=\"mean-before\">${data.change_point.mu_before_mean.toFixed(2)}</span>\r\n          </p>\r\n          <p>\r\n            Mean Price After: <span className=\"mean-after\">${data.change_point.mu_after_mean.toFixed(2)}</span>\r\n          </p>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"main-content\">\r\n        <ResponsiveContainer width=\"100%\" height={500}>\r\n          <LineChart data={historicalData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"Date\" type=\"number\" scale=\"time\" domain={['dataMin', 'dataMax']} tickFormatter={(tick) => new Date(tick, 0, 1).getFullYear()} />\r\n            <YAxis label={{ value: 'Price (USD per barrel)', angle: -90, position: 'insideLeft' }} />\r\n            <Tooltip labelFormatter={(label) => `Date: ${new Date(label, 0, 1).getFullYear()}`} />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"Price\" stroke=\"#8884d8\" dot={false} />\r\n\r\n            {/* Reference lines for the change point and events */}\r\n            <ReferenceLine x={changePointYear} stroke=\"red\" strokeDasharray=\"3 3\" label={{ position: \"top\", value: `Change Point`, fill: \"red\", fontSize: 12 }} />\r\n            {events.map((event, index) => (\r\n              <ReferenceLine \r\n                key={index} \r\n                x={event.event_date.getFullYear()} \r\n                stroke=\"green\" \r\n                strokeDasharray=\"3 3\" \r\n                label={{ position: \"bottom\", value: event.event_name, fill: \"green\", fontSize: 10, dy: (index % 2 === 0) ? 20 : 0 }} \r\n              />\r\n            ))}\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}